{"ast":null,"code":"import axios from \"axios\";\nimport jwtDecode from \"jwt-decode\"; // You can use a library like jwt-decode to decode the JWT\n\nconst login = async (email, password) => {\n  try {\n    const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/auth/login`, {\n      email,\n      password\n    });\n    if (response.data.error) {\n      throw new Error(response.data.error);\n    }\n    console.log(\"Response from server:\", response);\n    const token = response.data.jwtToken;\n    console.log(\"Received token:\", token);\n    const decodedToken = jwtDecode(token);\n    console.log(\"Decoded token:\", decodedToken);\n\n    // Extract user information from decoded token\n    const user = {\n      username: decodedToken.username,\n      role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\n      userId: decodedToken.userId\n    };\n    console.log(user);\n\n    // Store token in local storage\n    localStorage.setItem(\"token\", token);\n    return user;\n  } catch (error) {\n    console.error(\"Login error\", error);\n    throw error;\n  }\n};\nconst logout = () => {\n  localStorage.removeItem(\"token\");\n};\nconst register = async (username, email, password, role) => {\n  console.log(\"Registering user with data:\", {\n    username,\n    email,\n    password,\n    role\n  });\n  try {\n    const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/users`, {\n      UserName: username,\n      Email: email,\n      Password: password,\n      Role: role\n    });\n    if (response.data.error) {\n      throw new Error(response.data.error);\n    }\n    return response.data.message; // Assuming a success message is returned\n  } catch (error) {\n    console.error(\"Registration error\", error.message);\n    throw error;\n  }\n};\nexport const AuthService = {\n  login,\n  logout,\n  register\n};","map":{"version":3,"names":["axios","jwtDecode","login","email","password","response","post","process","env","REACT_APP_API_BASE_URL","data","error","Error","console","log","token","jwtToken","decodedToken","user","username","role","userId","localStorage","setItem","logout","removeItem","register","UserName","Email","Password","Role","message","AuthService"],"sources":["C:/Users/sandi/TaskManagment-Front end/task-managment/src/services/AuthService.js"],"sourcesContent":["import axios from \"axios\";\r\nimport jwtDecode from \"jwt-decode\"; // You can use a library like jwt-decode to decode the JWT\r\n\r\n\r\nconst login = async (email, password) => {\r\n\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/auth/login`, {\r\n            email,\r\n            password,\r\n        });\r\n\r\n        if (response.data.error) {\r\n            throw new Error(response.data.error);\r\n        }\r\n        console.log(\"Response from server:\", response);\r\n        const token = response.data.jwtToken;\r\n        console.log(\"Received token:\", token);\r\n        const decodedToken = jwtDecode(token);\r\n        console.log(\"Decoded token:\", decodedToken);\r\n\r\n        // Extract user information from decoded token\r\n        const user = {\r\n            username: decodedToken.username,\r\n            role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\r\n            userId: decodedToken.userId\r\n        };\r\n\r\n        console.log(user);\r\n\r\n        // Store token in local storage\r\n        localStorage.setItem(\"token\", token);\r\n\r\n        return user;\r\n\r\n    } catch (error) {\r\n        console.error(\"Login error\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nconst logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n};\r\n\r\nconst register = async (username, email, password, role) => {\r\n    console.log(\"Registering user with data:\", {username, email, password, role});\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/users`, {\r\n            UserName: username,\r\n    Email: email,\r\n    Password: password,\r\n    Role: role\r\n        });\r\n\r\n        if (response.data.error) {\r\n            throw new Error(response.data.error);\r\n        }\r\n\r\n        return response.data.message; // Assuming a success message is returned\r\n\r\n    } catch (error) {\r\n        console.error(\"Registration error\", error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const AuthService = {\r\n    login,\r\n    logout,\r\n    register\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY,CAAC,CAAC;;AAGpC,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAErC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,aAAY,EAAE;MAClFN,KAAK;MACLC;IACJ,CAAC,CAAC;IAEF,IAAIC,QAAQ,CAACK,IAAI,CAACC,KAAK,EAAE;MACrB,MAAM,IAAIC,KAAK,CAACP,QAAQ,CAACK,IAAI,CAACC,KAAK,CAAC;IACxC;IACAE,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAET,QAAQ,CAAC;IAC9C,MAAMU,KAAK,GAAGV,QAAQ,CAACK,IAAI,CAACM,QAAQ;IACpCH,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,KAAK,CAAC;IACrC,MAAME,YAAY,GAAGhB,SAAS,CAACc,KAAK,CAAC;IACrCF,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEG,YAAY,CAAC;;IAE3C;IACA,MAAMC,IAAI,GAAG;MACTC,QAAQ,EAAEF,YAAY,CAACE,QAAQ;MAC/BC,IAAI,EAAEH,YAAY,CAAC,8DAA8D,CAAC;MAClFI,MAAM,EAAEJ,YAAY,CAACI;IACzB,CAAC;IAEDR,OAAO,CAACC,GAAG,CAACI,IAAI,CAAC;;IAEjB;IACAI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAER,KAAK,CAAC;IAEpC,OAAOG,IAAI;EAEf,CAAC,CAAC,OAAOP,KAAK,EAAE;IACZE,OAAO,CAACF,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACnC,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAMa,MAAM,GAAGA,CAAA,KAAM;EACjBF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;AACpC,CAAC;AAED,MAAMC,QAAQ,GAAG,MAAAA,CAAOP,QAAQ,EAAEhB,KAAK,EAAEC,QAAQ,EAAEgB,IAAI,KAAK;EACxDP,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE;IAACK,QAAQ;IAAEhB,KAAK;IAAEC,QAAQ;IAAEgB;EAAI,CAAC,CAAC;EAC7E,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,QAAO,EAAE;MAC7EkB,QAAQ,EAAER,QAAQ;MAC1BS,KAAK,EAAEzB,KAAK;MACZ0B,QAAQ,EAAEzB,QAAQ;MAClB0B,IAAI,EAAEV;IACF,CAAC,CAAC;IAEF,IAAIf,QAAQ,CAACK,IAAI,CAACC,KAAK,EAAE;MACrB,MAAM,IAAIC,KAAK,CAACP,QAAQ,CAACK,IAAI,CAACC,KAAK,CAAC;IACxC;IAEA,OAAON,QAAQ,CAACK,IAAI,CAACqB,OAAO,CAAC,CAAC;EAElC,CAAC,CAAC,OAAOpB,KAAK,EAAE;IACZE,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACoB,OAAO,CAAC;IAClD,MAAMpB,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMqB,WAAW,GAAG;EACvB9B,KAAK;EACLsB,MAAM;EACNE;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}