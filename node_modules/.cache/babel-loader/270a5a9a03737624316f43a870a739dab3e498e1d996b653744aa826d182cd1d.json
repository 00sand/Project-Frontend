{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sandi\\\\TaskManagment-Front end\\\\task-managment\\\\src\\\\components\\\\Project.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Project = () => {\n  _s();\n  const initialStatusData = {\n    'Assigned': {\n      name: 'Assigned',\n      items: []\n    },\n    'In Progress': {\n      name: 'In Progress',\n      items: []\n    },\n    'Completed': {\n      name: 'Completed',\n      items: []\n    }\n  };\n  const {\n    id\n  } = useParams();\n  const [project, setProject] = useState(null);\n  const [statusData, setStatusData] = useState(initialStatusData);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_API_BASE_URL}/projects`).then(response => {\n      setProject(response.data);\n    }).catch(error => console.error(error));\n  }, [id]);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_API_BASE_URL}/tasks`).then(response => {\n      console.log('API Response:', response.data); // Check the data received from the API\n\n      const tasksByStatus = response.data.reduce((acc, task) => {\n        const statusCategory = task.statusCategory.statusName;\n        if (!acc[statusCategory]) {\n          acc[statusCategory] = {\n            name: statusCategory,\n            items: []\n          };\n        }\n        acc[statusCategory].items.push(task);\n        return acc;\n      }, {\n        ...initialStatusData\n      });\n      console.log('Processed Data:', tasksByStatus); // Check the data after processing\n      setStatusData(tasksByStatus);\n    }).catch(error => {\n      console.log('Error:', error);\n    });\n  }, []);\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) return;\n    if (source.droppableId === destination.droppableId) {\n      // Reorder items in the same droppable\n      const reorderedItems = Array.from(statusData[source.droppableId].items);\n      const [movedItem] = reorderedItems.splice(source.index, 1);\n      reorderedItems.splice(destination.index, 0, movedItem);\n      setStatusData({\n        ...statusData,\n        [source.droppableId]: {\n          ...statusData[source.droppableId],\n          items: reorderedItems\n        }\n      });\n    } else {\n      // Move item to a different droppable\n      const sourceItems = Array.from(statusData[source.droppableId].items);\n      const [movedItem] = sourceItems.splice(source.index, 1);\n      const destinationItems = Array.from(statusData[destination.droppableId].items);\n      destinationItems.splice(destination.index, 0, movedItem);\n      setStatusData({\n        ...statusData,\n        [source.droppableId]: {\n          ...statusData[source.droppableId],\n          items: sourceItems\n        },\n        [destination.droppableId]: {\n          ...statusData[destination.droppableId],\n          items: destinationItems\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: Object.entries(statusData).map((_ref, index) => {\n        let [status, data] = _ref;\n        return /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: status,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            style: {\n              margin: '0 10px',\n              backgroundColor: 'white',\n              width: 250\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: data.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 33\n            }, this), data.items.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: item.id.toString(),\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                children: item.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 45\n              }, this)\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 37\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)\n        }, status, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Project, \"9wKghdsNJb/iTe2hTz4t3eNm1cg=\", false, function () {\n  return [useParams];\n});\n_c = Project;\nvar _c;\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","Droppable","Draggable","useParams","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Project","_s","initialStatusData","name","items","id","project","setProject","statusData","setStatusData","get","process","env","REACT_APP_API_BASE_URL","then","response","data","catch","error","console","log","tasksByStatus","reduce","acc","task","statusCategory","statusName","push","onDragEnd","result","source","destination","droppableId","reorderedItems","Array","from","movedItem","splice","index","sourceItems","destinationItems","children","Object","entries","map","_ref","status","provided","ref","innerRef","droppableProps","style","margin","backgroundColor","width","fileName","_jsxFileName","lineNumber","columnNumber","item","draggableId","toString","draggableProps","dragHandleProps","content","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/sandi/TaskManagment-Front end/task-managment/src/components/Project.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport const Project = () => {\r\n\r\n    const initialStatusData = {\r\n        'Assigned': { name: 'Assigned', items: [] },\r\n        'In Progress': { name: 'In Progress', items: [] },\r\n        'Completed': { name: 'Completed', items: [] },\r\n    };\r\n\r\n    const { id } = useParams();\r\n    const [project, setProject] = useState(null);\r\n    const [statusData, setStatusData] = useState(initialStatusData);\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_API_BASE_URL}/projects`)\r\n            .then(response => {\r\n                setProject(response.data);\r\n            })\r\n            .catch(error => console.error(error));\r\n    }, [id]);\r\n\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`${process.env.REACT_APP_API_BASE_URL}/tasks`)\r\n            .then((response) => {\r\n                console.log('API Response:', response.data); // Check the data received from the API\r\n\r\n                const tasksByStatus = response.data.reduce((acc, task) => {\r\n                    const statusCategory = task.statusCategory.statusName;\r\n                    if (!acc[statusCategory]) {\r\n                        acc[statusCategory] = { name: statusCategory, items: [] };\r\n                    }\r\n                    acc[statusCategory].items.push(task);\r\n                    return acc;\r\n                }, { ...initialStatusData });\r\n\r\n                console.log('Processed Data:', tasksByStatus); // Check the data after processing\r\n                setStatusData(tasksByStatus);\r\n            })\r\n            .catch((error) => {\r\n                console.log('Error:', error);\r\n            });\r\n    }, []);\r\n\r\n\r\n    const onDragEnd = (result) => {\r\n        const { source, destination } = result;\r\n        if (!destination) return;\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            // Reorder items in the same droppable\r\n            const reorderedItems = Array.from(statusData[source.droppableId].items);\r\n            const [movedItem] = reorderedItems.splice(source.index, 1);\r\n            reorderedItems.splice(destination.index, 0, movedItem);\r\n\r\n            setStatusData({\r\n                ...statusData,\r\n                [source.droppableId]: {\r\n                    ...statusData[source.droppableId],\r\n                    items: reorderedItems,\r\n                },\r\n            });\r\n        } else {\r\n            // Move item to a different droppable\r\n            const sourceItems = Array.from(statusData[source.droppableId].items);\r\n            const [movedItem] = sourceItems.splice(source.index, 1);\r\n            const destinationItems = Array.from(statusData[destination.droppableId].items);\r\n            destinationItems.splice(destination.index, 0, movedItem);\r\n\r\n            setStatusData({\r\n                ...statusData,\r\n                [source.droppableId]: {\r\n                    ...statusData[source.droppableId],\r\n                    items: sourceItems,\r\n                },\r\n                [destination.droppableId]: {\r\n                    ...statusData[destination.droppableId],\r\n                    items: destinationItems,\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                {Object.entries(statusData).map(([status, data], index) => (\r\n                    <Droppable droppableId={status} key={status}>\r\n                        {(provided) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}\r\n                                style={{ margin: '0 10px', backgroundColor: 'white', width: 250 }}\r\n                            >\r\n                                <h3>{data.name}</h3>\r\n                                {data.items.map((item, index) => (\r\n                                    <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\r\n                                        {(provided) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                            >\r\n                                                {item.content}\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                ))}\r\n            </DragDropContext>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}