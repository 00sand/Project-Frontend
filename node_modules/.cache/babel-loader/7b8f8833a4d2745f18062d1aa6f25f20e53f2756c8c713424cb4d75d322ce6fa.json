{"ast":null,"code":"import axios from \"axios\";\nimport { getUserIdFromToken } from '../services';\nimport { useAuth } from '../context/AuthContext';\nexport const Profile = {\n  async update(field, value) {\n    const userId = getUserIdFromToken();\n    const {\n      authState,\n      setAuthInfo\n    } = useAuth();\n    if (!userId) {\n      throw new Error(\"User ID not found in token.\");\n    }\n    try {\n      const response = await axios.put(`${process.env.REACT_APP_API_BASE_URL}/users/${userId}`, {\n        [field]: value\n      }, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (response.data.error) {\n        throw new Error(response.data.error);\n      }\n      const updatedUser = decodeToken();\n      setAuthInfo({\n        ...authState,\n        username: updatedUser.username\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Update error\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","getUserIdFromToken","useAuth","Profile","update","field","value","userId","authState","setAuthInfo","Error","response","put","process","env","REACT_APP_API_BASE_URL","headers","localStorage","getItem","data","error","updatedUser","decodeToken","username","console"],"sources":["C:/Users/sandi/TaskManagment-Front end/task-managment/src/components/Profile.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { getUserIdFromToken } from '../services';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nexport const Profile = {\r\n\r\n    async update(field, value) {\r\n        const userId = getUserIdFromToken();\r\n        const { authState, setAuthInfo } = useAuth();\r\n\r\n        if (!userId) {\r\n            throw new Error(\"User ID not found in token.\");\r\n        }\r\n\r\n        try {\r\n            const response = await axios.put(`${process.env.REACT_APP_API_BASE_URL}/users/${userId}`, { [field]: value }, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n                }\r\n            });\r\n\r\n            if (response.data.error) {\r\n                throw new Error(response.data.error);\r\n            }\r\n            const updatedUser = decodeToken();\r\n            setAuthInfo({\r\n                ...authState,\r\n                username: updatedUser.username\r\n            });\r\n\r\n            return response.data;\r\n\r\n        } catch (error) {\r\n            console.error(\"Update error\", error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,OAAO,QAAQ,wBAAwB;AAEhD,OAAO,MAAMC,OAAO,GAAG;EAEnB,MAAMC,MAAMA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACvB,MAAMC,MAAM,GAAGN,kBAAkB,CAAC,CAAC;IACnC,MAAM;MAAEO,SAAS;MAAEC;IAAY,CAAC,GAAGP,OAAO,CAAC,CAAC;IAE5C,IAAI,CAACK,MAAM,EAAE;MACT,MAAM,IAAIG,KAAK,CAAC,6BAA6B,CAAC;IAClD;IAEA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,UAASR,MAAO,EAAC,EAAE;QAAE,CAACF,KAAK,GAAGC;MAAM,CAAC,EAAE;QAC1GU,OAAO,EAAE;UACL,eAAe,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;QAC7D;MACJ,CAAC,CAAC;MAEF,IAAIP,QAAQ,CAACQ,IAAI,CAACC,KAAK,EAAE;QACrB,MAAM,IAAIV,KAAK,CAACC,QAAQ,CAACQ,IAAI,CAACC,KAAK,CAAC;MACxC;MACA,MAAMC,WAAW,GAAGC,WAAW,CAAC,CAAC;MACjCb,WAAW,CAAC;QACR,GAAGD,SAAS;QACZe,QAAQ,EAAEF,WAAW,CAACE;MAC1B,CAAC,CAAC;MAEF,OAAOZ,QAAQ,CAACQ,IAAI;IAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZI,OAAO,CAACJ,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}