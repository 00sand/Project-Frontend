{"ast":null,"code":"import axios from \"axios\";\nimport { getUserIdFromToken, decodeToken } from '../services';\nimport { useAuth, setAuthInfo } from '../context/AuthContext';\nexport const Profile = {\n  async update(field, value, setAuthInfo) {\n    const userId = getUserIdFromToken();\n    if (!userId) {\n      throw new Error(\"User ID not found in token.\");\n    }\n    try {\n      const response = await axios.put(`${process.env.REACT_APP_API_BASE_URL}/users/${userId}`, {\n        [field]: value\n      }, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (response.data.error) {\n        throw new Error(response.data.error);\n      }\n\n      // Check if the server response contains a new token\n      if (response.data.token) {\n        // Store the new token in local storage\n        localStorage.setItem('token', response.data.token);\n        // Decode the new token to get updated user information\n        const updatedUser = decodeToken(response.data.token);\n\n        // Update the app state with the new user information\n        setAuthInfo(prevState => ({\n          ...prevState,\n          username: updatedUser.userName\n        }));\n      } else {\n        const updatedUser = decodeToken();\n        setAuthInfo(prevState => ({\n          ...prevState,\n          username: updatedUser.userName\n        }));\n      }\n      console.log('Server Response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Update error\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","getUserIdFromToken","decodeToken","useAuth","setAuthInfo","Profile","update","field","value","userId","Error","response","put","process","env","REACT_APP_API_BASE_URL","headers","localStorage","getItem","data","error","token","setItem","updatedUser","prevState","username","userName","console","log"],"sources":["C:/Users/sandi/TaskManagment-Front end/task-managment/src/components/Profile.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { getUserIdFromToken, decodeToken } from '../services';\r\nimport { useAuth, setAuthInfo } from '../context/AuthContext';\r\n\r\nexport const Profile = {\r\n    async update(field, value, setAuthInfo) {\r\n        const userId = getUserIdFromToken();\r\n\r\n        if (!userId) {\r\n            throw new Error(\"User ID not found in token.\");\r\n        }\r\n\r\n        try {\r\n            const response = await axios.put(\r\n                `${process.env.REACT_APP_API_BASE_URL}/users/${userId}`,\r\n                { [field]: value },\r\n                {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n                    }\r\n                }\r\n            );\r\n\r\n            if (response.data.error) {\r\n                throw new Error(response.data.error);\r\n            }\r\n\r\n            // Check if the server response contains a new token\r\n            if (response.data.token) {\r\n                // Store the new token in local storage\r\n                localStorage.setItem('token', response.data.token);\r\n                // Decode the new token to get updated user information\r\n                const updatedUser = decodeToken(response.data.token);\r\n\r\n                // Update the app state with the new user information\r\n                setAuthInfo(prevState => ({\r\n                    ...prevState,\r\n                    username: updatedUser.userName\r\n                }));\r\n            } else {\r\n                const updatedUser = decodeToken();\r\n                setAuthInfo(prevState => ({\r\n                    ...prevState,\r\n                    username: updatedUser.userName\r\n                }));\r\n            }\r\n\r\n            console.log('Server Response:', response.data);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Update error\", error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,aAAa;AAC7D,SAASC,OAAO,EAAEC,WAAW,QAAQ,wBAAwB;AAE7D,OAAO,MAAMC,OAAO,GAAG;EACnB,MAAMC,MAAMA,CAACC,KAAK,EAAEC,KAAK,EAAEJ,WAAW,EAAE;IACpC,MAAMK,MAAM,GAAGR,kBAAkB,CAAC,CAAC;IAEnC,IAAI,CAACQ,MAAM,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IAEA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAC3B,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,UAASN,MAAO,EAAC,EACvD;QAAE,CAACF,KAAK,GAAGC;MAAM,CAAC,EAClB;QACIQ,OAAO,EAAE;UACL,eAAe,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;QAC7D;MACJ,CACJ,CAAC;MAED,IAAIP,QAAQ,CAACQ,IAAI,CAACC,KAAK,EAAE;QACrB,MAAM,IAAIV,KAAK,CAACC,QAAQ,CAACQ,IAAI,CAACC,KAAK,CAAC;MACxC;;MAEA;MACA,IAAIT,QAAQ,CAACQ,IAAI,CAACE,KAAK,EAAE;QACrB;QACAJ,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEX,QAAQ,CAACQ,IAAI,CAACE,KAAK,CAAC;QAClD;QACA,MAAME,WAAW,GAAGrB,WAAW,CAACS,QAAQ,CAACQ,IAAI,CAACE,KAAK,CAAC;;QAEpD;QACAjB,WAAW,CAACoB,SAAS,KAAK;UACtB,GAAGA,SAAS;UACZC,QAAQ,EAAEF,WAAW,CAACG;QAC1B,CAAC,CAAC,CAAC;MACP,CAAC,MAAM;QACH,MAAMH,WAAW,GAAGrB,WAAW,CAAC,CAAC;QACjCE,WAAW,CAACoB,SAAS,KAAK;UACtB,GAAGA,SAAS;UACZC,QAAQ,EAAEF,WAAW,CAACG;QAC1B,CAAC,CAAC,CAAC;MACP;MAEAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEjB,QAAQ,CAACQ,IAAI,CAAC;MAC9C,OAAOR,QAAQ,CAACQ,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZO,OAAO,CAACP,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}