{"ast":null,"code":"import axios from \"axios\";\nimport { decodeToken, getUserIdFromToken, getUsernameFromToken, getRoleFromToken } from './tokenService';\nimport jwtDecode from \"jwt-decode\"; // You can use a library like jwt-decode to decode the JWT\n\nconst login = async (email, password) => {\n  try {\n    const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/auth/login`, {\n      email,\n      password\n    });\n    if (response.data.error) {\n      throw new Error(response.data.error);\n    }\n    const token = response.data.jwtToken;\n\n    // Store token in local storage\n    localStorage.setItem(\"token\", token);\n    const user = {\n      username: getUsernameFromToken(),\n      role: getRoleFromToken(),\n      userId: getUserIdFromToken()\n    };\n    return user;\n  } catch (error) {\n    console.error(\"Login error\", error);\n    throw error;\n  }\n};\nconst register = async (username, email, password, role) => {\n  const payload = {\n    UserName: username,\n    Email: email,\n    Password: password,\n    Role: role\n  };\n  try {\n    const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/users`, payload);\n    if (response.data.error) {\n      throw new Error(response.data.error);\n    }\n    const token = response.data.jwtToken;\n    localStorage.setItem(\"token\", token);\n    const user = {\n      username: getUsernameFromToken(),\n      role: getRoleFromToken(),\n      userId: getUserIdFromToken()\n    };\n    return user;\n  } catch (error) {\n    if (error.response) {\n      console.error(\"Server responded with:\", error.response.data.message);\n      console.error(\"Errors:\", error.response.data.errors);\n    }\n    console.error(\"Registration error\", error.message);\n    throw error;\n  }\n};\nconst logout = () => {\n  localStorage.removeItem(\"token\");\n};\nexport const AuthService = {\n  login,\n  logout,\n  register\n};","map":{"version":3,"names":["axios","decodeToken","getUserIdFromToken","getUsernameFromToken","getRoleFromToken","jwtDecode","login","email","password","response","post","process","env","REACT_APP_API_BASE_URL","data","error","Error","token","jwtToken","localStorage","setItem","user","username","role","userId","console","register","payload","UserName","Email","Password","Role","message","errors","logout","removeItem","AuthService"],"sources":["C:/Users/sandi/TaskManagment-Front end/task-managment/src/services/AuthService.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { decodeToken, getUserIdFromToken, getUsernameFromToken, getRoleFromToken } from './tokenService';\r\nimport jwtDecode from \"jwt-decode\"; // You can use a library like jwt-decode to decode the JWT\r\n\r\nconst login = async (email, password) => {\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/auth/login`, {\r\n            email,\r\n            password,\r\n        });\r\n\r\n        if (response.data.error) {\r\n            throw new Error(response.data.error);\r\n        }\r\n\r\n        const token = response.data.jwtToken;\r\n\r\n        // Store token in local storage\r\n        localStorage.setItem(\"token\", token);\r\n\r\n        const user = {\r\n            username: getUsernameFromToken(),\r\n            role: getRoleFromToken(),\r\n            userId: getUserIdFromToken()\r\n        };\r\n\r\n        return user;\r\n    } catch (error) {\r\n        console.error(\"Login error\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nconst register = async (username, email, password, role) => {\r\n    const payload = {\r\n        UserName: username,\r\n        Email: email,\r\n        Password: password,\r\n        Role: role\r\n    };\r\n\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/users`, payload);\r\n\r\n        if (response.data.error) {\r\n            throw new Error(response.data.error);\r\n        }\r\n\r\n        const token = response.data.jwtToken;\r\n\r\n        localStorage.setItem(\"token\", token);\r\n\r\n        const user = {\r\n            username: getUsernameFromToken(),\r\n            role: getRoleFromToken(),\r\n            userId: getUserIdFromToken()\r\n        };\r\n\r\n        return user;\r\n    } catch (error) {\r\n        if (error.response) {\r\n            console.error(\"Server responded with:\", error.response.data.message);\r\n            console.error(\"Errors:\", error.response.data.errors);\r\n        }\r\n        console.error(\"Registration error\", error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\nconst logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n};\r\n\r\n\r\nexport const AuthService = {\r\n    login,\r\n    logout,\r\n    register\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,kBAAkB,EAAEC,oBAAoB,EAAEC,gBAAgB,QAAQ,gBAAgB;AACxG,OAAOC,SAAS,MAAM,YAAY,CAAC,CAAC;;AAEpC,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACrC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,aAAY,EAAE;MAClFN,KAAK;MACLC;IACJ,CAAC,CAAC;IAEF,IAAIC,QAAQ,CAACK,IAAI,CAACC,KAAK,EAAE;MACrB,MAAM,IAAIC,KAAK,CAACP,QAAQ,CAACK,IAAI,CAACC,KAAK,CAAC;IACxC;IAEA,MAAME,KAAK,GAAGR,QAAQ,CAACK,IAAI,CAACI,QAAQ;;IAEpC;IACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;IAEpC,MAAMI,IAAI,GAAG;MACTC,QAAQ,EAAEnB,oBAAoB,CAAC,CAAC;MAChCoB,IAAI,EAAEnB,gBAAgB,CAAC,CAAC;MACxBoB,MAAM,EAAEtB,kBAAkB,CAAC;IAC/B,CAAC;IAED,OAAOmB,IAAI;EACf,CAAC,CAAC,OAAON,KAAK,EAAE;IACZU,OAAO,CAACV,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACnC,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAMW,QAAQ,GAAG,MAAAA,CAAOJ,QAAQ,EAAEf,KAAK,EAAEC,QAAQ,EAAEe,IAAI,KAAK;EACxD,MAAMI,OAAO,GAAG;IACZC,QAAQ,EAAEN,QAAQ;IAClBO,KAAK,EAAEtB,KAAK;IACZuB,QAAQ,EAAEtB,QAAQ;IAClBuB,IAAI,EAAER;EACV,CAAC;EAED,IAAI;IACA,MAAMd,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,QAAO,EAAEc,OAAO,CAAC;IAEzF,IAAIlB,QAAQ,CAACK,IAAI,CAACC,KAAK,EAAE;MACrB,MAAM,IAAIC,KAAK,CAACP,QAAQ,CAACK,IAAI,CAACC,KAAK,CAAC;IACxC;IAEA,MAAME,KAAK,GAAGR,QAAQ,CAACK,IAAI,CAACI,QAAQ;IAEpCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;IAEpC,MAAMI,IAAI,GAAG;MACTC,QAAQ,EAAEnB,oBAAoB,CAAC,CAAC;MAChCoB,IAAI,EAAEnB,gBAAgB,CAAC,CAAC;MACxBoB,MAAM,EAAEtB,kBAAkB,CAAC;IAC/B,CAAC;IAED,OAAOmB,IAAI;EACf,CAAC,CAAC,OAAON,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACN,QAAQ,EAAE;MAChBgB,OAAO,CAACV,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACN,QAAQ,CAACK,IAAI,CAACkB,OAAO,CAAC;MACpEP,OAAO,CAACV,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACN,QAAQ,CAACK,IAAI,CAACmB,MAAM,CAAC;IACxD;IACAR,OAAO,CAACV,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACiB,OAAO,CAAC;IAClD,MAAMjB,KAAK;EACf;AACJ,CAAC;AAGD,MAAMmB,MAAM,GAAGA,CAAA,KAAM;EACjBf,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;AACpC,CAAC;AAGD,OAAO,MAAMC,WAAW,GAAG;EACvB9B,KAAK;EACL4B,MAAM;EACNR;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}